package irc.ui.view;

import irc.core.IRCModeParser;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Toolkit;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.ImageIcon;
import javax.swing.BoxLayout;

import java.awt.GridLayout;
import java.util.ArrayList;

import javax.swing.JCheckBox;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JTextField;
import javax.swing.JRadioButton;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class ControlCenter extends JDialog {
	
	// -------------------------------
	// Fields
	// -------------------------------
	
	/* The owner class*/
	private IRCMainFrame mainFrame;
	
	/* The name of the channel */
	private String chan;
	
	/* The ArrayList which contains the ban-list */
	/* NOT SUPPORTED BY OUR SERVER AT THIS TIME*/
	private ArrayList banlist;
	private ArrayList banlistToRemove = new ArrayList();
	private ArrayList banlistToAdd = new ArrayList();
	
	/* IRC Channel mode parser */
	private IRCModeParser modeParser;
	
	/* Visual Elements: Generated by WindowBuilder */
	private final JPanel contentPanel = new JPanel();
	private JTextField txtLimit;
	private JTextField txtPassword;
	
	/* Checkboxs */
	private JCheckBox chckbxInviteOnly; // Mode i: Invite Only
	private JCheckBox chckbxPrivateChannelFlag; //Mode p: private
	private JCheckBox chckbxSecretChannelFlag;  //Mode s: secret
	private JCheckBox chckbxTopicSettableBy; //Mode t: topic
	private JCheckBox chckbxNoMessageTo; //Mode n: No message from outside
	private JCheckBox chckbxModerated;  //Mode m: Moderated
	private JCheckBox chckbxSetBanMask;  //Mode b: Banlist
	
	/**
	 * Create the dialog.
	 */
	public ControlCenter(IRCMainFrame pOwner, String pChan, int pCount, int pOperCount, ArrayList pBanList, String modes) {
		
		super(pOwner, true);
		setTitle("Control Center");
		
		this.mainFrame = pOwner;
		this.chan = pChan;
		this.banlist = pBanList;
		this.modeParser = new IRCModeParser(modes);
		
		setBounds(100, 100, 357, 462);
		getContentPane().setLayout(new BorderLayout());
		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		getContentPane().add(contentPanel, BorderLayout.CENTER);
		
		JPanel panel = new JPanel();
		
		JPanel panel_1 = new JPanel();
		GroupLayout gl_contentPanel = new GroupLayout(contentPanel);
		gl_contentPanel.setHorizontalGroup(
			gl_contentPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPanel.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.LEADING)
						.addComponent(panel_1, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
						.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE))
					.addContainerGap())
		);
		gl_contentPanel.setVerticalGroup(
			gl_contentPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPanel.createSequentialGroup()
					.addContainerGap()
					.addComponent(panel, GroupLayout.PREFERRED_SIZE, 101, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(panel_1, GroupLayout.PREFERRED_SIZE, 275, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(34, Short.MAX_VALUE))
		);
		panel_1.setLayout(null);
		
		chckbxPrivateChannelFlag = new JCheckBox("Private Channel Flag");
		chckbxPrivateChannelFlag.setBounds(6, 19, 323, 23);
		panel_1.add(chckbxPrivateChannelFlag);
		
		chckbxSecretChannelFlag = new JCheckBox("Secret Channel Flag");
		chckbxSecretChannelFlag.setBounds(6, 54, 323, 23);
		panel_1.add(chckbxSecretChannelFlag);
		
		chckbxInviteOnly = new JCheckBox("Invite Only");
		chckbxInviteOnly.setBounds(6, 89, 323, 23);
		panel_1.add(chckbxInviteOnly);
		
		chckbxTopicSettableBy = new JCheckBox("Topic Settable by Channelop Only");
		chckbxTopicSettableBy.setBounds(6, 127, 323, 23);
		panel_1.add(chckbxTopicSettableBy);
		
		chckbxNoMessageTo = new JCheckBox("No Message to Channel from Outside Clients");
		chckbxNoMessageTo.setBounds(6, 162, 323, 23);
		panel_1.add(chckbxNoMessageTo);
		
		chckbxModerated = new JCheckBox("Moderated");
		chckbxModerated.setBounds(6, 197, 323, 23);
		panel_1.add(chckbxModerated);
		
		chckbxSetBanMask = new JCheckBox("Set Ban Mask to Keep Users Out");
		chckbxSetBanMask.setBounds(6, 232, 323, 23);
		panel_1.add(chckbxSetBanMask);
		panel.setLayout(null);
		
		JCheckBox chckbxNewCheckBox = new JCheckBox("Set User Limit: ");
		chckbxNewCheckBox.setBounds(6, 18, 128, 23);
		panel.add(chckbxNewCheckBox);
		
		JCheckBox chckbxSetPasswordFor = new JCheckBox("Set Password For Channel: ");
		chckbxSetPasswordFor.setBounds(6, 60, 207, 23);
		panel.add(chckbxSetPasswordFor);
		
		txtLimit = new JTextField();
		txtLimit.setText("Limit");
		txtLimit.setBounds(135, 16, 79, 28);
		panel.add(txtLimit);
		txtLimit.setColumns(10);
		
		txtPassword = new JTextField();
		txtPassword.setText("Password");
		txtPassword.setColumns(10);
		txtPassword.setBounds(207, 58, 122, 28);
		panel.add(txtPassword);
		contentPanel.setLayout(gl_contentPanel);
		{
			JPanel buttonPane = new JPanel();
			buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
			getContentPane().add(buttonPane, BorderLayout.SOUTH);
			{
				JButton okButton = new JButton("OK");
				okButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						generateModes();
						dispose();
					}
				});
				okButton.setIcon(new ImageIcon(ControlCenter.class.getResource("/irc/ui/resources/accept.png")));
				okButton.setActionCommand("OK");
				buttonPane.add(okButton);
				getRootPane().setDefaultButton(okButton);
			}
			{
				JButton cancelButton = new JButton("Cancel");
				cancelButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						dispose();
					}
				});
				cancelButton.setIcon(new ImageIcon(ControlCenter.class.getResource("/irc/ui/resources/cancel.png")));
				cancelButton.setActionCommand("Cancel");
				buttonPane.add(cancelButton);
			}
		}
		
		//Adjust positions
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	    Dimension mySize = getSize();
	    if (mySize.height > screenSize.height)
	      mySize.height = screenSize.height;
	    if (mySize.width > screenSize.width) 
	      mySize.width = screenSize.width;
	    int x = (screenSize.width - mySize.width)/2;
	    int y = (screenSize.height - mySize.height)/2;
	    setLocation(x, y);
	    setVisible(true);
	}
	
	// -------------------------------
	// Private Methods
	// -------------------------------

	private void generateModes() {
		//TODO: generate modes to channel according to selected checkbox
	}
	
}

package irc.ui.view;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;

import java.awt.GridLayout;

import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.UIManager;

import java.awt.Toolkit;

import javax.swing.JMenuItem;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.JButton;
import javax.swing.WindowConstants;

import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;

import javax.swing.JTextField;

import java.awt.Insets;

import javax.swing.JTabbedPane;

import irc.core.*;

import javax.swing.JScrollPane;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.*;

import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;

public class IRCMainFrame extends JFrame implements Runnable {
	
	// -------------------------------
	// Fields
	// -------------------------------

	private IRCMainFrame mIRCMain;
	private IRCMain conn;
	private String host;
	private int portMin;
	private int portMax;
	private String passwd;
	private String nickname;
	private String realname;
	private String username;
	private String quitMsg;
	private ArrayList<String> channelsList = new ArrayList<String>();
	private boolean isConnected = false;/** 
	/* Perform executed on startup */
	private String perform = "";
	private long timeOfLastList;

	private Image logo;
	private String logoPath = "/irc/ui/resources/smiley.png";
	
	/** 
	   * This <code>int</code> represents the index of the last channel in the 
	   * tabbedpane. <br />
	   * Default is 0.<br />
	   * This is used to order the channel- and query-windows in the tabbed pane: 
	   * first tab is the console, then the channels, then the query-windows. 
	   * But remember this does not have to be really the first channel-index; it 
	   * is just theoretically the one. If there are no channels yet, e.g. after 
	   * the application-start, this value is 0. 
	   */
	private int lastChanIndex = 0;
	
	/* Right click on tabs menu popups */
	private JPopupMenu tabsPopup = getTabsPopupMenu();
	
	/* Contains the version of the program. */
	public static final String VERSION = "0.1";
	
	/* The panels' background color */
	private Color bgColor = new Color(255, 255, 255);
	
	/* The color of own */
	private Color ownColor = new Color(0, 0, 175);
	
	/* Flag automatic channel cutting. */
	private boolean cutChannelText = true;
	
	/* Give a beep when nick is in PRVMSG */
	private boolean nickSoundHighlight = false;
	
	/** 
	 * This indicates the max. amount of character in one panel. If it is higher, 
	 * there are cutted lines at the top of the channel-text. 
	 */
	private int maxTextLength = 30000;
	
	/** 
	  * Determines wether a beep is made when a query is opened. <br />
	  * Default is <code>true</code>. 
	  */
	private boolean querySoundHighlight = true;
	
	  /** 
	   * The color of highlighted tab chans. <br />
	   * Default is blue. 
	   */
	 private Color highlightColor = Color.blue;
	
	/**
	 * Visual Elements
	 * Automately generated by WindowBuilder
	 */
	private JPanel contentPane;
	private JMenuItem mntmConnect;
	private JMenuItem mntmDisconnect;
	private JTabbedPane tabs;
	private JMenuItem mntmInfo;
	private JMenuItem mntmConfiguration;
	private JMenuItem mntmExit;
	private JMenuItem mntmJoin;
	private JMenuItem mntmPart;
	private JMenuItem mntmChangeNick;
	private JMenuItem mntmWhois;
	private JMenuItem mntmControlCenter;
	private JMenuItem mntmListChannels;
	
	// -------------------------------
	// Getters and Setters
	// -------------------------------
	
	 /** 
	   * Returns the perform.
	   * @return The perform.
	   */
	  public String getPerform() {
	    return perform;
	  }

	// ------------------------------

	  /**
	   * Sets the perform.
	   * @param p The new perform.
	   */
	  public void setPerform(String p) {
	    perform = p;
	  }

	// ------------------------------
	
	  /** 
	   * Just changes the class-var <code>nick</code> and the 
	   * <code>IRCConnection</code>'s nicknam variable. Used by the 
	   * <code>IRCEventListener</code> to change this class's class-var.
	   * @param nick The new nickname.
	   */
	  public void setNick(String nick) {
	    nickname = nick;
	  }
	  
	  /**
	   * Returns the nickname.
	   * @return The nickname.
	   */
	  public String getNick() {
	    return nickname;
	  }
	  
	// ------------------------------

	  /**
	   * Returns the IRC hostname.
	   * @return The IRC hostname.
	   */
	  public String getHost() {
	    return host;
	  }

	// ------------------------------

	  /**
	   * Sets the IRC hostname.
	   * @param address The IRC server's address.
	   */
	  public void setHost(String address) {
	    host = address;
	  }
	  
	// ------------------------------
	  
	  /**
	   * Returns the min. port.
	   * @return The min. port.
	   */
	  public int getMinPort() {
	    return portMin;
	  }

	// ------------------------------

	  /**
	   * Sets the min. port.
	   * @param port The new min. port.
	   */
	  public void setMinPort(int port) {
	    portMin = port;
	  }

	// ------------------------------

	  /**
	   * Returns the max. port.
	   * @return The max. port.
	   */
	  public int getMaxPort() {
	    return portMax;
	  }

	// ------------------------------

	  /**
	   * Sets the max. port.
	   * @param port The new max. port.
	   */
	  public void setMaxPort(int port) {
	    portMax = port;
	  }

	  /* Return the IRC Connection */
	  public IRCMain getIRCConnection() {
		  return conn;
	  }
	  
	// ------------------------------

	  /**
	   * Returns the IRC password.
	   * @return The IRC password.
	   */
	  public String getPassword() {
	    return passwd;
	  }

	// ------------------------------

	  /**
	   * Sets the IRC password.
	   * @param pswd The new password.
	   */
	  public void setPassword(String pswd) {
	    passwd = pswd;
	  }
	 
	// ------------------------------
	  
	  /**
	   * Returns the realname.
	   * @return The realname.
	   */
	  public String getRealname() {
	    return realname;
	  }

	// ------------------------------

	  /**
	   * Sets the realname.
	   * @param name The realname.
	   */
	  public void setRealname(String name) {
	    realname = name;
	  }

	// ------------------------------
	  /**
	   * Returns the username.
	   * @return The username.
	   */
	  public String getUsername() {
	    return username;
	  }

	// ------------------------------

	  /**
	   * Sets the username.
	   * @param user The username.
	   */
	  public void setUsername(String user) {
	    username = user;
	  }

	// ------------------------------

	  /**
	   * Returns the quitmsg.
	   * @return The quitmsg.
	   */
	  public String getQuitMsg() {
	    return quitMsg;
	  }

	// ------------------------------

	  /**
	   * Sets the quit-message.
	   * @param msg The new quit-msg.
	   */
	  public void setQuitMsg(String msg) {
	    quitMsg = msg;
	  }

	// ------------------------------
	  
	  /* Return main frame's background color */
	  public Color getBgColor() {
		  return bgColor;
	  }
	  
	  /* Return own color */
	  public Color getOwnColor() {
		  return ownColor;
	  }
	  
	  public boolean getCutChannelText() {
		  return cutChannelText;
	  }

	  /* Return the maximum channel text until cutting */
	  public int getMaxTextLength() {
		    return maxTextLength;
		  }
	  
	  /**
	   * Returns <code>true</code> if nick sound highlight is on.
	   * @return <code>true</code> if nick sound highlight is on.
	   */
	  public boolean getNickSoundHighlight() {
	    return nickSoundHighlight;
	  }
	  
	// -------------------------------
	// Launcher
	// -------------------------------
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Throwable e) {
			e.printStackTrace();
		}
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					IRCMainFrame frame = new IRCMainFrame();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public IRCMainFrame() {
		initComps();
		createEvents();
	}
	
	// -------------------------------
	// Events
	// -------------------------------

	private void initComps() {
		
		logo = new ImageIcon(this.logoPath).getImage();
		timeOfLastList = System.currentTimeMillis();

		setTitle("CSE6324: IRC Client");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 790, 479);
		loadSettings();
		
		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);
		
		/*++++++ MenuBar -> File ++++++*/
		JMenu mnFile = new JMenu("File");
		mnFile.setMnemonic('F');
		mnFile.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/house.png")));
		menuBar.add(mnFile);
		
		//MenuBar -> File -> Connect
		mntmConnect = new JMenuItem("Connect");
		mntmConnect.setMnemonic('C');
		mntmConnect.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/connect.png")));
		mnFile.add(mntmConnect);
		
		mntmDisconnect = new JMenuItem("Disconnect");
		mntmDisconnect.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/disconnect.png")));
		mnFile.add(mntmDisconnect);
		
		JSeparator separator = new JSeparator();
		mnFile.add(separator);
		
		mntmConfiguration = new JMenuItem("Configuration");

		mntmConfiguration.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/cog_edit.png")));
		mnFile.add(mntmConfiguration);
		
		JSeparator separator_1 = new JSeparator();
		mnFile.add(separator_1);
		
		mntmExit = new JMenuItem("Exit");
		mntmExit.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/door_open.png")));
		mnFile.add(mntmExit);
		
		JMenu mnOptions = new JMenu("Options");
		mnOptions.setMnemonic('O');
		mnOptions.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/application_osx_terminal.png")));
		menuBar.add(mnOptions);
		
		mntmControlCenter = new JMenuItem("Control Center");
		mntmControlCenter.setMnemonic('C');
		mntmControlCenter.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/control_equalizer_blue.png")));
		mnOptions.add(mntmControlCenter);
		
		JMenuItem mntmFullMessage = new JMenuItem("Full Message");
		mntmFullMessage.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				conn.send(JOptionPane.showInputDialog("Input command here:"));
			}
		});
		mntmFullMessage.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/comment_edit.png")));
		mnOptions.add(mntmFullMessage);
		
		JSeparator separator_2 = new JSeparator();
		mnOptions.add(separator_2);
		
		mntmJoin = new JMenuItem("Join");
		mntmJoin.setMnemonic('J');
		mntmJoin.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/user_add.png")));
		mnOptions.add(mntmJoin);
		
		mntmListChannels = new JMenuItem("List channels");
		mntmListChannels.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/user_add.png")));
		mnOptions.add(mntmListChannels);
		
		mntmPart = new JMenuItem("Part");
		mntmPart.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/user_go.png")));
		mnOptions.add(mntmPart);
		
		mntmChangeNick = new JMenuItem("Change Nick");
		mntmChangeNick.setMnemonic('N');
		mntmChangeNick.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/arrow_rotate_anticlockwise.png")));
		mnOptions.add(mntmChangeNick);
		
		mntmWhois = new JMenuItem("Whois");
		mntmWhois.setMnemonic('W');
		mntmWhois.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/zoom.png")));
		mnOptions.add(mntmWhois);
		
		JMenu mnHelp = new JMenu("Help");
		mnHelp.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/arrow_in.png")));
		mnHelp.setMnemonic('H');
		menuBar.add(mnHelp);
		
		mntmInfo = new JMenuItem("Info");
		mntmInfo.setMnemonic('I');
		
		mntmInfo.setIcon(new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/exclamation.png")));
		mnHelp.add(mntmInfo);
		
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		GridBagLayout gbl_contentPane = new GridBagLayout();
		gbl_contentPane.columnWidths = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
		gbl_contentPane.rowHeights = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
		gbl_contentPane.columnWeights = new double[]{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		gbl_contentPane.rowWeights = new double[]{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		contentPane.setLayout(gbl_contentPane);
		
		tabs = new JTabbedPane(JTabbedPane.TOP);
		tabs.add(new ConsolePanel(this), IRCUtil.CONSOLEWINDOWTITLE, IRCUtil.CONSOLEWINDOWINDEX);
		
		GridBagConstraints gbc_tabbedPane = new GridBagConstraints();
		gbc_tabbedPane.gridheight = 14;
		gbc_tabbedPane.gridwidth = 24;
		gbc_tabbedPane.insets = new Insets(0, 0, 5, 5);
		gbc_tabbedPane.fill = GridBagConstraints.BOTH;
		gbc_tabbedPane.gridx = 0;
		gbc_tabbedPane.gridy = 0;
		contentPane.add(tabs, gbc_tabbedPane);
		
		setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				quit();
			}
		});
	}
	
	private void createEvents() {
		
		/* MenuBar -> Help -> Info Clicked */
		mntmInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				String info =  "JavaIRC "+ VERSION +"\n"+
	                       "CSE6324 Team Project - IRC Client"+
	                       "\n"+
	                       "Members:\n"+
	                       "    Manager	 : Matthew Waller \n"+
	                       "    Developer: Zhognwei Li \n"+
	                       "    Developer: Feng Duan";
	        JOptionPane.showMessageDialog(null, info, "JavaIRC "+ VERSION, 
	            JOptionPane.INFORMATION_MESSAGE, 
	            (logo != null) ? new ImageIcon(logo) : null); 
	        
	        /*TODO: FIX logo doesn't show*/
			}
		});
		
		/* MenuBar -> File -> Connect Clicked */
		mntmConnect.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				connect();
			}
		});
		
		/* MenuBar -> File -> Disconnect */
		mntmDisconnect.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(isConnected()) {
					conn.doQuit(quitMsg);
					conn.close();
				}
			}
		});
		/* MenuBar -> File -> Configuration Clicked */
		mntmConfiguration.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				openConfigDialog();
			}
		});
		
		/* MenuBar -> File -> Exit*/
		mntmExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				quit();
			}
		});
		
		/* MenuBar -> Options -> Control Center */
		mntmControlCenter.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Component component = getSelectedComponent();
				if(component instanceof ChanPanel)
					openControlCenter((ChanPanel)component);
			}
		});
		
		/* MenuBar -> Options -> Join */
		mntmJoin.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(isConnected()){ 
					String input = JOptionPane.showInputDialog(IRCMainFrame.this, "Enter the Channel Name to Join: ");
					if(input != null)
						conn.doJoin(input);
				}}
		});
		
		/*MenuBar -> Options -> List channels*/
		mntmListChannels.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(isConnected() && (timeOfLastList > 30000 + System.currentTimeMillis() || channelsList.isEmpty()))
					conn.doList();
				else
					conn.doJoin(displayChannelsList());
			}
		});
		
		/* MenuBar -> Options -> Part */
		mntmPart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String input = JOptionPane.showInputDialog(null, "Enter the Channel Name to Part: ");
				if(isConnected() && input != null)
					conn.doPart(input);
			}
		});
		
		/* MenuBar -> Options -> Change Nick */
		mntmChangeNick.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String input = JOptionPane.showInputDialog(null, "Enter a new nickname: ");
				if(input != null)
				{
					setNick(input);
					if(isConnected())
						conn.doNick(input);
				}
			}
		});
		
		/**
		 *  MenuBar -> Options -> Whois 
		 *  NOT SUPPORTED BY OUR SERVER AT THIS TIME
		 */
		mntmWhois.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String input = JOptionPane.showInputDialog(null, "Enter a nick to query: ");
				if(isConnected() && input != null)
					conn.doWhois(input);
			}
		});
		
		/* tabs -> right clicked */
		tabs.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent arg0) {
				setSelectedTab();
			}
		});
		tabs.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				// Right click on tabs
				if(e.getClickCount() == 1 && e.getButton() == MouseEvent.BUTTON3)
					tabsPopup.show(tabs, e.getX(), e.getY());
			}
		});
		
	}
	
	private String displayChannelsList(){
		return (String) JOptionPane.showInputDialog(this, "", "Choose From a list of channels",
    			JOptionPane.PLAIN_MESSAGE, new ImageIcon(IRCMainFrame.class.getResource("/irc/ui/resources/user_add.png")),
    			channelsList.toArray(), channelsList.get(0));
	}

	// -------------------------------
	// Service Methods
	// -------------------------------
	
	  /** 
	   * Executes the perform.<br />This is done on every connection. 
	   */
	  protected void executePerform() {
	    try {
	      StringTokenizer st = new StringTokenizer(perform,"\n");
	      int count = st.countTokens();
	      for (int i = 0; i < count; i++) 
	        parseCmd(st.nextToken()); 
	    } catch (Exception exc) {
	      exc.printStackTrace();
	    }
	  }
	
	/** 
	   * Quits from the network and shuts the virtual machine down. 
	   */  
	  private void quit() {
	    if (!isConnected() || IRCUtil.confirmDialog("Are you sure to exit?",
	        "Quit")) {
	      if (isConnected()) {
	        conn.doQuit(quitMsg);
	        conn.close();
	      }
	      saveSettings(); 
	      System.exit(0);
	    } 
	  }
	
	 /** 
	   * Saves the userdata to the settings-file <code>moep.conf</code>. 
	   */
	  private void saveSettings() {
	    try {
	      Properties p = new Properties();
	      FileOutputStream out = new FileOutputStream("irc.conf");
	      p.setProperty("host", host);
	      p.setProperty("portMin", String.valueOf(portMin));
	      p.setProperty("portMax", String.valueOf(portMax));
	      p.setProperty("pass", passwd);
	      p.setProperty("realname", realname);
	      p.setProperty("username", username);
	      p.setProperty("nick", nickname);
	      p.setProperty("cutChannelText", String.valueOf(cutChannelText));
	      p.setProperty("maxTextLength", String.valueOf(maxTextLength));
	      p.setProperty("queryHighlight", 
	          String.valueOf(querySoundHighlight));
	      p.setProperty("nickHighlight", 
	          String.valueOf(nickSoundHighlight));
	      //p.setProperty("logging", String.valueOf(logging));
	      p.setProperty("appWidth", String.valueOf(getWidth()));
	      p.setProperty("appHeight", String.valueOf(getHeight()));
	      p.setProperty("appX", String.valueOf(getX()));
	      p.setProperty("appY", String.valueOf(getY()));
	      p.setProperty("ownColor", String.valueOf(ownColor.getRGB()));
	      p.setProperty("bgColor", String.valueOf(bgColor.getRGB()));
	      //p.list(new PrintWriter(new BufferedWriter( new FileWriter("irc.conf"))));
	      p.store(out,"Settings-file of irc");
	      out.close();
	    } catch (Exception exc) {
	      exc.printStackTrace();
	    }
	  }
	  
	  /* Load Settings */
	  private void loadSettings() {
		  try {
			  Properties p = new Properties();
		      FileInputStream in = new FileInputStream("irc.conf");
		      p.load(in);
		      this.host = p.getProperty("host", "irc.quakenet.eu.org");
		      this.portMin = Integer.parseInt(p.getProperty("portMin","6667"));
		      this.portMax = Integer.parseInt(p.getProperty("portMax","6669"));
		      this.passwd = p.getProperty("pass", ""); 
		      this.realname = p.getProperty("realname", "realname");
		      this.username = p.getProperty("username", "username");
		      this.nickname = p.getProperty("nick", "nickname");
		      this.quitMsg = p.getProperty("quitMsg");
		      this.cutChannelText = new Boolean(
		          p.getProperty("cutChannelText")).booleanValue();
		      this.maxTextLength = Integer.parseInt(
		          p.getProperty("maxTextLength"));
		      this.querySoundHighlight = new Boolean(
		          p.getProperty("queryHighlight")).booleanValue();
		      this.nickSoundHighlight = new Boolean(
		          p.getProperty("nickHighlight")).booleanValue();
		      this.ownColor = new Color(Integer.parseInt(p.getProperty("ownColor")));
		      this.bgColor = new Color(Integer.parseInt(p.getProperty("bgColor")));
		      in.close();
			
		} catch (Exception e) {
				this.host = "localhost";
		      this.portMin = 6667;
		      this.portMax = 6669;
		      this.passwd = ""; 
		      this.realname = "realname";
		      this.username = "username";
		      this.nickname = "nickname";
		      this.quitMsg = "";
		      this.cutChannelText = true;
		      this.maxTextLength = 30000;
		      this.querySoundHighlight = true;
		      this.nickSoundHighlight = false;
		      this.ownColor = new Color(0, 0, 175);
		      this.bgColor = new Color(255, 255, 255);

		      JOptionPane.showMessageDialog(null,"No configuration has been set up yet "
		          , "Please setup your client",
		          JOptionPane.INFORMATION_MESSAGE);
		      new ConfigDialog(this);
		}
	  }
	
	/**
	   * Generates a new <code>JPopupMenu</code> for the right-click popup of the
	   * <code>JTabbedPane</code>. 
	   * @return The tabs' <code>JPopupMenu</code>.
	   */
	  private JPopupMenu getTabsPopupMenu() {
	    JPopupMenu popup = new JPopupMenu("Tabs");
	    // Tabs -> Part
	    JMenuItem menuItemPart = new JMenuItem("Part");
	    menuItemPart.addActionListener(new ActionListener() { 
	      public void actionPerformed(ActionEvent e) { 
	        Component component = getSelectedComponent();
	        if (!(component instanceof ConsolePanel)) {
	          String chan = ((PanelTemplate)component).getWindowName();
	          if (isConnected() && component instanceof ChanPanel) 
	            conn.doPart(chan);
	          else if (component instanceof QueryPanel)
	            closePanel(chan);
	        }
	      } 
	    } );
	    popup.add(menuItemPart);
	    // Tabs -> Close (Force)
	    JMenuItem menuItemClose = new JMenuItem("Force Close");
	    menuItemClose.addActionListener(new ActionListener() { 
	      public void actionPerformed(ActionEvent e) { 
	        Component component = getSelectedComponent();
	        if (!(component instanceof ConsolePanel)) {
	          String chan = ((PanelTemplate)component).getWindowName();
	          if (isConnected() && component instanceof ChanPanel) 
	            conn.doPart(chan);
	          closePanel(chan); 
	        }
	      } 
	    } );
	    popup.add(menuItemClose);
	    return popup;
	  }
	
	protected void openConfigDialog() {
		new ConfigDialog(this);
	}
	
	protected void connect() {
		disconnect(); // maybe we must disconnect
	    Thread threadConn = new Thread(this);
	    threadConn.setDaemon(true);
	    threadConn.start();
	}
	
	public void connect(String pHost, int pPort) {
		this.host = pHost;
		this.portMin = pPort;
		this.portMax = pPort;
		connect();
	}
	
	protected void disconnect() {
		 if (isConnected()) { // TODO: Infinity loop bug
		      for (int i = tabs.getTabCount()-1; i > 0; i--)
		        tabs.remove(i);
		      updateTab(IRCUtil.CONSOLEWINDOWINDEX, "# Disconnected");
		      enableConnectMenuItem(true);
		    }
		    isConnected = false;
		    lastChanIndex = 0;
	}
	
	// -------------------------------
	// Public Methods
	// -------------------------------
	
	public void openControlCenter(ChanPanel pChanPanel) {
		pChanPanel.openControlCenter();
	}
	
	  /** 
	   * Enables and disables the menuitems File -&lgt; Connect and File -&gt; 
	   * Disconnect so that they're always the opposite. 
	   * @param enableConnect If <code>true</code>, the connect-menuitems are
	   *                      enabled and the disconnect-menuitem is disabled.
	   */
	  private void enableConnectMenuItem(boolean enableConnect) {
	    mntmConnect.setEnabled(enableConnect);
	    mntmDisconnect.setEnabled(!enableConnect);
	  }

	/* Start the connect by running the thread*/
	@Override
	public void run() {
		// TODO Auto-generated method stub
		updateTab(IRCUtil.CONSOLEWINDOWINDEX, "# Trying to connect to "+ host);
		
		    enableConnectMenuItem(false);
		    username = username.toLowerCase();
		    
		    conn = new IRCMain(host, portMin, portMax, passwd, nickname, username, realname);
		    //TODO: LISTENER
		    conn.addIRCEventListener(new Listener(this));
		    conn.setPong(false); 
		    conn.setDaemon(true);
		    try {
		      conn.connect();
		      this.isConnected = conn.isConnected();
		    } catch (Exception exc) {
		      String reason = "";
		      if (exc.getMessage() != null) {
		        reason = ": "+ exc.getMessage();
		      }
		      updateTab(IRCUtil.CONSOLEWINDOWINDEX, "# Couldn't connect"+ reason);
		      enableConnectMenuItem(true);
		      exc.printStackTrace();
		      this.isConnected = false;
		    }
	}
	
	/*Flag whether the connection is established or not at the moment*/
	public boolean isConnected() {
		return isConnected;
	}
	
	/** 
	   * Changes the content of a chan-textarea. <br />
	   * It uses the <code>updateTab(int, String, String, Color)</code> method. 
	   * @param title The tab's title.
	   * @param line The new line.
	   * @return The tab's index.
	   */
	  public int updateTab(String title, String line) {
	    int index = indexOfTab(title);
	    return updateTab(index, title, line);
	  }

	/** 
	   * Changes the content of a chan-textarea. <br />
	   * It uses the <code>updateTab(int, String, String, Color)</code> method. 
	   * @param index The tab's index.
	   * @param line The new line.
	   * @return The tab's name.
	   */
	  public String updateTab(int index, String line) {
	    String title = tabs.getTitleAt(index);
	    updateTab(index, title, line);
	    return title;
	  }
	  

	  /** 
	   * Changes the content of a chan-textarea. This method is used by the 
	   * <code>updateTab(int, String)</code> and 
	   * <code>updateTab(String, String)</code> methods. 
	   * @param index The tab's index.
	   * @param title The tab's title.
	   * @param line The new line.
	   * @return The tab's possibly new index.
	   */
	  public int updateTab(int index, String title, String line) {
	    if (index == -1) { 
	      if (IRCUtil.isChannel(title)) {
	        addChan(title);
	      } else {
	        addQuery(title, false);
	      }
	      index = indexOfTab(title);
	    }
	    Component component = tabs.getComponentAt(index);
	    ((PanelTemplate)component).updateText(line, Color.BLACK); 
	    return index;
	  }
	  
	  protected int indexOfTab(String title) {
			return tabs.indexOfTab(title);
	  }
	  
	  /**
	   * On a join there should be created a new tab and a new 
	   * <code>ChanPanel</code>. The channel is the last tab of the channels but 
	   * before the queries.
	   * @param chan The channel's name.
	   * @return The new <code>ChanPanel</code>.
	   */
	  public ChanPanel addChan(String chan) {
	    int index = indexOfTab(chan);
	    if (index == -1) {
	      ChanPanel chanPanel = new ChanPanel(this, chan);
	      tabs.add(chanPanel, chan, lastChanIndex + 1); 
	      tabs.setSelectedComponent(chanPanel);
	      tabs.revalidate();
	      lastChanIndex++;
	      return chanPanel;
	    } else {
	      Component component = getComponentAt(index);
	      return (ChanPanel)component;
	    }
	  } 
	

	  /** 
	   * Returns the selected text of an <code>AbstractPanel</code>.
	   * @return The selected text of an <code>AbstractPanel</code>.
	   */
	  public String getSelection() {
	    String s = "";
	    Component component = getSelectedComponent();
	    PanelTemplate panel = (PanelTemplate)component;
	    s = panel.getSelection();
	    panel.removeSelection();
	    return s;
	  }
	  
	  /** 
	   * Returns the selected <code>Component</code>. 
	   * @return The selected <code>Component</code>. 
	   */
	  public Component getSelectedComponent() {
	    int index = getSelectedIndex();
	    return tabs.getComponentAt(index);
	  }
	  
	  /** 
	   * Returns the selected index in the tabs.
	   * @return The selected index.
	   */
	  public int getSelectedIndex() {
	    return tabs.getSelectedIndex();
	  }
	  
	  /** 
	   * On a query there should be created a new tab and a new 
	   * <code>QueryPanel</code>. If the <code>boolean</code> is <code>true</code>, 
	   * the query is selected in the tabbar and is on top. 
	   * @param nick The nickname of the query.
	   * @param select If <code>true</code>, the new query is made on-top.
	   * @return The new <code>QueryPanel</code>.
	   */
	  public QueryPanel addQuery(String nick, boolean select) {
	    int index = indexOfTab(nick);
	    if (index == -1) {
	      QueryPanel queryPanel = new QueryPanel(this, nick);
	      tabs.add(queryPanel, nick);
	      if (select)
	        tabs.setSelectedComponent(queryPanel);
	      tabs.revalidate();
	      if (!select)
	        doSoundHighlight();
	      return queryPanel;
	    } else {
	      Component component = tabs.getComponentAt(index);
	      return (QueryPanel)component;
	    }
	  }

	  /** 
	   * Analyzes a hand-made command of the input-line with the 
	   * <code>org.schwering.irc.lib.IRCParser</code>, generates the line, which is 
	   * printed out by the client and sends the command to the server. 
	   */
	  public void doSoundHighlight() {
	    if (querySoundHighlight) 
	      Toolkit.getDefaultToolkit().beep();
	  }
	  
	  /** 
	   * Returns the <code>Component</code> of a tab.
	   * @param index The tab's index.
	   * @return The <code>Component</code> of the tab at <code>index</code>.
	   */
	  public Component getComponentAt(int index) {
	    return tabs.getComponentAt(index);
	  }
	  
	// ------------------------------ 
	  
	  /** 
	   * Adds a nickname to the nicklist of a given channel. Uses the 
	   * <code>addNick(int, String)</code> method. 
	   * @param chan The channel's name.
	   * @param nicks The nickname array which is to add.
	   */
	  public void addNicks(String chan, String[] nicks) {
	    int index = indexOfTab(chan);
	    //Clear nicklist before updating
	    removeAllNicks(chan);
	    addNicks(index, nicks);
	  }

	  /** 
	   * Adds a nickname to the nicklist of a given channel. 
	   * @param index The channel's index.
	   * @param nicks The nickname array which is to add.
	   */
	  public void addNicks(int index, String[] nicks) {
	    if (index != -1) {
	      Component component = tabs.getComponentAt(index);
	      ChanPanel chanPanel = (ChanPanel)component;
	      for (int i = 0; i < nicks.length; i++)
	        chanPanel.addNick(nicks[i]);
	    }
	  }
	  
	  /** 
	   * Adds a nickname to the nicklist of a given channel. Uses the 
	   * <code>addNick(int, String)</code> method. 
	   * @param chan The channel's name.
	   * @param nick The nickname which is to add.
	   */
	  public void addNick(String chan, String nick) {
	    int index = indexOfTab(chan);
	    addNick(index, nick);
	  }


	  /** 
	   * Adds a nickname to the nicklist of a given channel. 
	   * @param index The channel's index.
	   * @param nick The nickname which is to add.
	   */
	  public void addNick(int index, String nick) {
	    if (index != -1) {
	      Component component = tabs.getComponentAt(index);
	      ChanPanel chanPanel = (ChanPanel)component;
	      chanPanel.addNick(nick);
	    }
	  }
	  
	  /** 
	   * Removes a nickname from the nicklist of a given channel. Returns the 
	   * console of the removed user: 
	   * <ul>
	   * <li> <code>"@"</code> = Operator </li>
	   * <li> <code>"+"</code> = Visible </li>
	   * <li> <code>""</code> = Normal nickname </code>
	   * </ul>
	   * <code>null</code> is returned if no nickname was removed. <br />
	   * Uses the <code>removeNick(int, String)</code>-method. 
	   * @param chan The channel's name.
	   * @param nick The nickname which is to remove.
	   * @return An "@", "+", or "" which stands for the mode the user had.
	   */
	  public String removeNick(String chan, String nick) {
	    int index = indexOfTab(chan);
	    return removeNick(index, nick);
	  }

	  /** 
	   * Removes a nickname from the nicklist of a given channel. Returns the 
	   * console of the removed user: 
	   * <ul>
	   * <li> <code>"@"</code> = Operator </li>
	   * <li> <code>"+"</code> = Visible </li>
	   * <li> <code>""</code> = Normal nickname </code>
	   * </ul>
	   * <code>null</code> is returned if no nickname was removed. 
	   * @param index The channel's index.
	   * @param nick The nickname which is to remove.
	   * @return An "@", "+", or "" which stands for the mode the user had. If no
	   *         user was found, <code>null</code> is returned.
	   */
	  public String removeNick(int index, String nick) {
	    Component component = tabs.getComponentAt(index);
	    ChanPanel chanPanel = (ChanPanel)component;
	    if (chanPanel.removeNick("@"+ nick))
	      return "@";
	    else if (chanPanel.removeNick("+"+ nick))
	      return "+";
	    else if (chanPanel.removeNick(nick))
	      return "";
	    return null;
	  }
	  
	  /** 
	   * Removes all nicknames from the nicklist of a given chan.<br />
	   * The channel's name indicates the channel. 
	   * @param chan The channel's name.
	   */
	  public void removeAllNicks(String chan) {
	    int index = indexOfTab(chan);
	    removeAllNicks(index);
	  }

	  /** 
	   * Removes all nicknames from the nicklist of a given chan.<br />
	   * The index represents the channel's position in the tabs. 
	   * @param index The channel's index.
	   */
	  public void removeAllNicks(int index) {
	    Component component = tabs.getComponentAt(index);
	    if (component instanceof ChanPanel) {
	      ((ChanPanel)component).removeAllNicks();
	    }
	  }
	  
	  /** 
	   * Changes the background of a given tab.<br />
	   * The tab is given as its name in a string. 
	   * @param title The tab's title.
	   */
	  public void doTabHighlight(String title) {
	    int index = indexOfTab(title);
	    doTabHighlight(index);
	  }

	  /** 
	   * Changes the background of a given tab.<br />
	   * The tab is given as its index. 
	   * @param index The tab's index.
	   */
	  private void doTabHighlight(int index) {
	    if (getSelectedIndex() != index) {
	      tabs.setBackgroundAt(index, highlightColor);
	      tabs.revalidate();
	    }
	  }

	  // -------------------------------
	  // Channel Mode operations
	  // -------------------------------
	  
	  /** 
	   * Updates _all_ modes with a complete string which contains all the modes 
	   * for the chancenter. 
	   * @param index The channel's index.
	   * @param modes The new modes.
	   */
	  public void updateModes(int index, String modes) {
	    if (index != -1) {
	      Component component = tabs.getComponentAt(index);
	      ChanPanel chanPanel = (ChanPanel)component;
	      chanPanel.updateModes(modes);
	    }
	  }
	  
	  /** 
	   * Updates _one_ mode of a channel. 
	   * @param index The channel's index.
	   * @param operator The operator (+ or -).
	   * @param mode The mode (i.e. i).
	   * @param arg The argument.
	   */
	  public void updateMode(int index, char operator, char mode, String arg) {
	    if (index != -1) {
	      Component component = tabs.getComponentAt(index);
	      ChanPanel chanPanel = (ChanPanel)component;
	      chanPanel.updateMode(operator, mode, arg);
	    }
	  }

	// -------------------------------
	// Pannel tab operations
	// -------------------------------
	  
	  /** 
	   * On a part there should be closed the concerning tab and chan/query. <br />
	   * This method is for both, <code>ChanPanel</code>s and 
	   * <code>QueryPanel</code>s. 
	   * @param chan The channel's name or the query's nickname.
	   * @return The new <code>JTabbedPane</code>.
	   */
	  public void closePanel(String chan) {
	    int index = indexOfTab(chan);
	     if (index != -1) {	      
	      tabs.removeTabAt(index); 
	      if (index <= lastChanIndex) 
	        lastChanIndex--; 
	    }
	    setSelectedTab();
	    tabs.revalidate();
	  }
	  
	  /** 
	   * A highlighted chan should be unhighlighted when it gets selected. That is 
	   * done by this method. 
	   */
	  public void setSelectedTab() {
	    if (tabs.getModel().isSelected()) {
	      int index = getSelectedIndex();
	      String title = tabs.getTitleAt(index);
	      tabs.setBackgroundAt(index, null);
	      tabs.revalidate();
	      setTitle("moepII - "+ title);
	      ((PanelTemplate)tabs.getComponentAt(index)).requestFocus();
	    }
	  }
	  
	  public int getTabCount() {
		  return tabs.getTabCount();
	  }
	  
	  /** 
	   * Returns the title of a tab.
	   * @param index The tab's index.
	   * @return The name of the tab at <code>index</code>.
	   */
	  public String getTitleAt(int index) {
	    return tabs.getTitleAt(index);
	  }
	  
	  /** 
	   * Sets the title of a tab.
	   * @param index The tab's index.
	   * @param title The new title.
	   */
	  public void setTitleAt(int index, String title) {
	    tabs.setTitleAt(index, title);
	  }
	  
	// -------------------------------
	// Parsers
	// -------------------------------

	  /** 
	   * Analyzes a hand-made command of the input-line.<br />
	   * It parses it with the <code>irc.core.IRCParser</code>, 
	   * generates the line, which is printed out by the client and sends the 
	   * command to the server.
	   */
	  public void parseCmd(String line) {
	    if (isConnected()) {
	      boolean show = true; // if /. it's hidden, by default shown
	      line = line.trim(); 

	      if (line.startsWith("/"))
	        line = line.substring(1); 

	      if (line.startsWith(".")) {
	        line = line.substring(1); 
	        show = false; 
	      }
	      
	      IRCParser parser = new IRCParser(line);
	      String cmd = parser.getCommand();
	      
	      if (cmd.equalsIgnoreCase("MSG")) { // PRIVMSG <chan> :<msg> alias
	        String chan = parser.getParameter(1);
	        String msg = line.substring(line.indexOf(parser.getParameter(1)) + 
	            parser.getParameter(1).length() + 1);
	        if (show)
	          parsePrivmsg(chan, msg);
	        else
	          conn.doPrivmsg(chan, msg);
	      } else if (cmd.equalsIgnoreCase("SAY")) { // PRIVMSG <ontop> :<msg> alias
	        if (getSelectedIndex() != IRCUtil.CONSOLEWINDOWINDEX) { 
	          String chan = ((PanelTemplate)getSelectedComponent()).getWindowName(); 
	          String msg = line.substring(4);
	          if (show)
	            parsePrivmsg(chan, msg);
	          else
	            conn.doPrivmsg(chan, msg);
	        }
	      } else if (cmd.equalsIgnoreCase("NOT") 
	          || cmd.equalsIgnoreCase("NOTICE")) { // NOTICE <chan> :<msg> alias
	        String chan = parser.getParameter(1);
	        String msg = line.substring(line.indexOf(parser.getParameter(1)) + 
	            parser.getParameter(1).length() + 1);
	        if (show)
	          parseNotice(chan, msg);
	        else
	          conn.doNotice(chan, msg);
	      } else if (cmd.equalsIgnoreCase("QUIT")) { // QUIT :<msg> alias
	        conn.doQuit(parser.getParametersFrom(2)); 
	        conn.close();
	      } else if (line.length() > 0) {
	        conn.send(line);
	        if (show) {
	          int index = getSelectedIndex();
	          updateTab(index, "# Executed: "+ line);
	        }
	      }
	    }
	  }
	  
	  /**
	   * Sends and prints a <code>PRIVMSG</code>.
	   * @param chan The channel or person to which the message is to be sent.
	   * @param msg The message itself.
	   */
	  public void parsePrivmsg(String chan, String msg) {
	    conn.doPrivmsg(chan, msg);
	    int index = indexOfTab(chan);
	    if (index != -1)
	      updateTab(index, "<"+ conn.getNick() +"> "+ msg);
	    else
	      updateTab(getSelectedIndex(), "* Message: To "+ chan +": "+ msg);
	  }

	// ------------------------------

	  /**
	   * Sends and prints a <code>NOTICE</code>.
	   * @param chan The channel or person to which the message is to be sent.
	   * @param msg The message itself.
	   */
	  public void parseNotice(String chan, String msg) {
	    conn.doNotice(chan, msg);
	    int index = getSelectedIndex();
	    updateTab(index, "* Notice: To "+ chan +": "+ msg);
	  }

	  /**
	   * Passes the BAN message from the server the tab of the appropriate channel
	   * @param index The index of channel in the tabs pane
	   * @param arg The string representing the ban mask
	   * @param nickAct Nickname of the one who set the ban
	   * @param currentTimeMillis Current time in milliseconds since the Unix epoch
	   */
	protected void addBan(int index, String arg, String nickAct,
			long currentTimeMillis) {
		Component channel = tabs.getComponent(index);
		((ChanPanel) channel).addBan(arg, nickAct, currentTimeMillis);
	}

	protected void removeBan(int index, String arg) {
		Component channel = tabs.getComponent(index);
		((ChanPanel) channel).removeBan(arg);
	}

	protected void updateChannels(ArrayList<String> listOut) {
		channelsList = listOut; timeOfLastList = System.currentTimeMillis();
	}
	
}
